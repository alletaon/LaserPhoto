package ServoConRemote;


/**
* ServoConRemote/_IConfigurationStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ServoConRemote_v2.idl
* Wednesday, April 19, 2017 6:32:21 PM MSK
*/

public class _IConfigurationStub extends org.omg.CORBA.portable.ObjectImpl implements ServoConRemote.IConfiguration
{

  public void SetupNetwork (ServoConRemote.IConfigurationPackage.NetworkSettings params)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("SetupNetwork", true);
                ServoConRemote.IConfigurationPackage.NetworkSettingsHelper.write ($out, params);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                SetupNetwork (params        );
            } finally {
                _releaseReply ($in);
            }
  } // SetupNetwork

  public ServoConRemote.IConfigurationPackage.NetworkSettings GetNetworkSetup ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("GetNetworkSetup", true);
                $in = _invoke ($out);
                ServoConRemote.IConfigurationPackage.NetworkSettings $result = ServoConRemote.IConfigurationPackage.NetworkSettingsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return GetNetworkSetup (        );
            } finally {
                _releaseReply ($in);
            }
  } // GetNetworkSetup

  public void UpdateFirmware ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("UpdateFirmware", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                UpdateFirmware (        );
            } finally {
                _releaseReply ($in);
            }
  } // UpdateFirmware

  public void Upload (byte[] data)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("Upload", true);
                ServoConRemote.IConfigurationPackage.ConfigDataHelper.write ($out, data);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                Upload (data        );
            } finally {
                _releaseReply ($in);
            }
  } // Upload

  public byte[] Download ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("Download", true);
                $in = _invoke ($out);
                byte $result[] = ServoConRemote.IConfigurationPackage.ConfigDataHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return Download (        );
            } finally {
                _releaseReply ($in);
            }
  } // Download


  //for initial CNC setup ONLY
  public void UploadDeviceSpecific (byte[] data)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("UploadDeviceSpecific", true);
                ServoConRemote.IConfigurationPackage.ConfigDataHelper.write ($out, data);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                UploadDeviceSpecific (data        );
            } finally {
                _releaseReply ($in);
            }
  } // UploadDeviceSpecific

  public String[] DeviceSpecificParameters ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_DeviceSpecificParameters", true);
                $in = _invoke ($out);
                String $result[] = ServoConRemote.IConfigurationPackage.DeviceSpecificParameterListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DeviceSpecificParameters (        );
            } finally {
                _releaseReply ($in);
            }
  } // DeviceSpecificParameters

  public void SetDeviceSpecificParameter (String param, String value, int applyAtOnce) throws ServoConRemote.NotFound, ServoConRemote.Impossible
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("SetDeviceSpecificParameter", true);
                $out.write_string (param);
                $out.write_string (value);
                $out.write_long (applyAtOnce);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ServoConRemote/NotFound:1.0"))
                    throw ServoConRemote.NotFoundHelper.read ($in);
                else if (_id.equals ("IDL:ServoConRemote/Impossible:1.0"))
                    throw ServoConRemote.ImpossibleHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                SetDeviceSpecificParameter (param, value, applyAtOnce        );
            } finally {
                _releaseReply ($in);
            }
  } // SetDeviceSpecificParameter


  //SYSTEM ONLY
  public void SetDeviceSpecific (String param, String value, int applyAtOnce)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("SetDeviceSpecific", true);
                $out.write_string (param);
                $out.write_string (value);
                $out.write_long (applyAtOnce);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                SetDeviceSpecific (param, value, applyAtOnce        );
            } finally {
                _releaseReply ($in);
            }
  } // SetDeviceSpecific

  public String GetDeviceSpecificParameter (String param) throws ServoConRemote.NotFound
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("GetDeviceSpecificParameter", true);
                $out.write_string (param);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ServoConRemote/NotFound:1.0"))
                    throw ServoConRemote.NotFoundHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return GetDeviceSpecificParameter (param        );
            } finally {
                _releaseReply ($in);
            }
  } // GetDeviceSpecificParameter

  public void Apply ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("Apply", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                Apply (        );
            } finally {
                _releaseReply ($in);
            }
  } // Apply


  //get config names from usb disk
  public String[] GetConfigs () throws ServoConRemote.NotFound
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("GetConfigs", true);
                $in = _invoke ($out);
                String $result[] = ServoConRemote.IConfigurationPackage.ConfigSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ServoConRemote/NotFound:1.0"))
                    throw ServoConRemote.NotFoundHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return GetConfigs (        );
            } finally {
                _releaseReply ($in);
            }
  } // GetConfigs


  //config is imported with Action('ImportConfig').Perform(path)
  public void ExportAs (String path)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ExportAs", true);
                $out.write_string (path);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                ExportAs (path        );
            } finally {
                _releaseReply ($in);
            }
  } // ExportAs

  public void ImportAs (String path)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ImportAs", true);
                $out.write_string (path);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                ImportAs (path        );
            } finally {
                _releaseReply ($in);
            }
  } // ImportAs

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ServoConRemote/IConfiguration:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _IConfigurationStub
