package ServoConRemote;


/**
* ServoConRemote/_IMotionProgramStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ServoConRemote_v2.idl
* Wednesday, April 19, 2017 6:32:20 PM MSK
*/


//operations on motion program
public class _IMotionProgramStub extends org.omg.CORBA.portable.ObjectImpl implements ServoConRemote.IMotionProgram
{


  //mb scales (spindle too) should be in ICNC
  public ServoConRemote.IUserParameter FeedScale ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_FeedScale", true);
                $in = _invoke ($out);
                ServoConRemote.IUserParameter $result = ServoConRemote.IUserParameterHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return FeedScale (        );
            } finally {
                _releaseReply ($in);
            }
  } // FeedScale

  public ServoConRemote.IUserParameter TraverseScale ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_TraverseScale", true);
                $in = _invoke ($out);
                ServoConRemote.IUserParameter $result = ServoConRemote.IUserParameterHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return TraverseScale (        );
            } finally {
                _releaseReply ($in);
            }
  } // TraverseScale


  //get list of all available programs
  public String[] GetPrograms ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("GetPrograms", true);
                $in = _invoke ($out);
                String $result[] = ServoConRemote.IMotionProgramPackage.ProgramSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return GetPrograms (        );
            } finally {
                _releaseReply ($in);
            }
  } // GetPrograms


  //mounts remote dir (smb share)
  public void MountShared (String path, String user, String password)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("MountShared", true);
                $out.write_string (path);
                $out.write_string (user);
                $out.write_string (password);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                MountShared (path, user, password        );
            } finally {
                _releaseReply ($in);
            }
  } // MountShared

  public void UnMountShared ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("UnMountShared", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                UnMountShared (        );
            } finally {
                _releaseReply ($in);
            }
  } // UnMountShared


  //NOTE: may have \r\n inside
  public String GetProgramText (String name) throws ServoConRemote.NotFound
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("GetProgramText", true);
                $out.write_string (name);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ServoConRemote/NotFound:1.0"))
                    throw ServoConRemote.NotFoundHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return GetProgramText (name        );
            } finally {
                _releaseReply ($in);
            }
  } // GetProgramText


  //NOTE: already open program can be deleted but will still run until another program is opened
  public void DeleteProgram (String name) throws ServoConRemote.NotFound
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DeleteProgram", true);
                $out.write_string (name);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ServoConRemote/NotFound:1.0"))
                    throw ServoConRemote.NotFoundHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                DeleteProgram (name        );
            } finally {
                _releaseReply ($in);
            }
  } // DeleteProgram


  //create program on CNC disk, overwriting existing
  public void Upload (String name, String data)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("Upload", true);
                $out.write_string (name);
                $out.write_string (data);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                Upload (name, data        );
            } finally {
                _releaseReply ($in);
            }
  } // Upload


  //prepare to load program from selected file, not needed for manual load control
  public void Open (String path) throws ServoConRemote.NotFound, ServoConRemote.SyntaxError, ServoConRemote.Impossible
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("Open", true);
                $out.write_string (path);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ServoConRemote/NotFound:1.0"))
                    throw ServoConRemote.NotFoundHelper.read ($in);
                else if (_id.equals ("IDL:ServoConRemote/SyntaxError:1.0"))
                    throw ServoConRemote.SyntaxErrorHelper.read ($in);
                else if (_id.equals ("IDL:ServoConRemote/Impossible:1.0"))
                    throw ServoConRemote.ImpossibleHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                Open (path        );
            } finally {
                _releaseReply ($in);
            }
  } // Open


  //WARNING: can have unpredicted consequences if line is not the same where motion
  public ServoConRemote.LongProcess StartLoad (int line, int shouldResume, int isDryRun) throws ServoConRemote.CNCError, ServoConRemote.Impossible
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("StartLoad", true);
                $out.write_long (line);
                $out.write_long (shouldResume);
                $out.write_long (isDryRun);
                $in = _invoke ($out);
                ServoConRemote.LongProcess $result = ServoConRemote.LongProcessHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ServoConRemote/CNCError:1.0"))
                    throw ServoConRemote.CNCErrorHelper.read ($in);
                else if (_id.equals ("IDL:ServoConRemote/Impossible:1.0"))
                    throw ServoConRemote.ImpossibleHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return StartLoad (line, shouldResume, isDryRun        );
            } finally {
                _releaseReply ($in);
            }
  } // StartLoad


  //stops execution allowing restart
  public void StopLoad ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("StopLoad", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                StopLoad (        );
            } finally {
                _releaseReply ($in);
            }
  } // StopLoad

  public ServoConRemote.LongProcess GoToLineStart (int lineTo, int backwards) throws ServoConRemote.CNCError, ServoConRemote.Impossible
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("GoToLineStart", true);
                $out.write_long (lineTo);
                $out.write_long (backwards);
                $in = _invoke ($out);
                ServoConRemote.LongProcess $result = ServoConRemote.LongProcessHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ServoConRemote/CNCError:1.0"))
                    throw ServoConRemote.CNCErrorHelper.read ($in);
                else if (_id.equals ("IDL:ServoConRemote/Impossible:1.0"))
                    throw ServoConRemote.ImpossibleHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return GoToLineStart (lineTo, backwards        );
            } finally {
                _releaseReply ($in);
            }
  } // GoToLineStart

  public void StartTrace (int line)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("StartTrace", true);
                $out.write_long (line);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                StartTrace (line        );
            } finally {
                _releaseReply ($in);
            }
  } // StartTrace

  public void StopTrace ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("StopTrace", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                StopTrace (        );
            } finally {
                _releaseReply ($in);
            }
  } // StopTrace

  public void TraceForward ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("TraceForward", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                TraceForward (        );
            } finally {
                _releaseReply ($in);
            }
  } // TraceForward

  public void TraceBackward ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("TraceBackward", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                TraceBackward (        );
            } finally {
                _releaseReply ($in);
            }
  } // TraceBackward

  public int CanResume ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("CanResume", true);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return CanResume (        );
            } finally {
                _releaseReply ($in);
            }
  } // CanResume


  //number of lines in current program
  public int Length ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("Length", true);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return Length (        );
            } finally {
                _releaseReply ($in);
            }
  } // Length


  //index of currently executing line (test how comments are handled!)
  public int GetCurrentLineIndex ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("GetCurrentLineIndex", true);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return GetCurrentLineIndex (        );
            } finally {
                _releaseReply ($in);
            }
  } // GetCurrentLineIndex


  //use only after StopLoad() and LongProcess returned from StartLoad() returns Done
  public int GetPausedLineIndex ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("GetPausedLineIndex", true);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return GetPausedLineIndex (        );
            } finally {
                _releaseReply ($in);
            }
  } // GetPausedLineIndex


  //one string from loaded program (mb not needed)
  public String GetLine (int index)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("GetLine", true);
                $out.write_long (index);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return GetLine (index        );
            } finally {
                _releaseReply ($in);
            }
  } // GetLine


  //Manuaal Loader
  public void Reset ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("Reset", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                Reset (        );
            } finally {
                _releaseReply ($in);
            }
  } // Reset


  //typedef struct _s_Line{string line; long last;} LineData;
  public int FeedLine (String line)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("FeedLine", true);
                $out.write_string (line);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return FeedLine (line        );
            } finally {
                _releaseReply ($in);
            }
  } // FeedLine


  //start execution
  public void Start () throws ServoConRemote.CNCError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("Start", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ServoConRemote/CNCError:1.0"))
                    throw ServoConRemote.CNCErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                Start (        );
            } finally {
                _releaseReply ($in);
            }
  } // Start

  public void Stop ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("Stop", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                Stop (        );
            } finally {
                _releaseReply ($in);
            }
  } // Stop

  public void Pause ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("Pause", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                Pause (        );
            } finally {
                _releaseReply ($in);
            }
  } // Pause

  public void Step () throws ServoConRemote.CNCError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("Step", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:ServoConRemote/CNCError:1.0"))
                    throw ServoConRemote.CNCErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                Step (        );
            } finally {
                _releaseReply ($in);
            }
  } // Step

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ServoConRemote/IMotionProgram:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _IMotionProgramStub
